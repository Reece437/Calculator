{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar Maths = function () {\n  function Maths(trigMode) {\n    _classCallCheck(this, Maths);\n\n    this.trigMode = trigMode;\n  }\n\n  _createClass(Maths, [{\n    key: \"sin\",\n    value: function sin(x) {\n      if (this.trigMode == 'Deg') {\n        return Math.sin(x * Math.PI / 180);\n      } else return Math.sin(x);\n    }\n  }, {\n    key: \"cos\",\n    value: function cos(x) {\n      if (this.trigMode == 'Deg') {\n        return Math.cos(x * Math.PI / 180);\n      } else return Math.cos(x);\n    }\n  }, {\n    key: \"tan\",\n    value: function tan(x) {\n      if (this.trigMode == 'Deg') {\n        if (x == 90) return 'undefined';\n        return Math.tan(x * Math.PI / 180);\n      } else return Math.tan(x);\n    }\n  }, {\n    key: \"sinInv\",\n    value: function sinInv(x) {\n      if (this.trigMode == 'Deg') {\n        return Math.asin(x) * 360 / (2 * Math.PI);\n      } else return Math.asin(x);\n    }\n  }, {\n    key: \"cosInv\",\n    value: function cosInv(x) {\n      if (this.trigMode == 'Deg') {\n        return Math.acos(x) * 360 / (2 * Math.PI);\n      } else return Math.acos(x);\n    }\n  }, {\n    key: \"tanInv\",\n    value: function tanInv(x) {\n      if (this.trigMode == 'Deg') {\n        return Math.atan(x) * 360 / (2 * Math.PI);\n      } else return Math.atan(x);\n    }\n  }, {\n    key: \"log\",\n    value: function log(x) {\n      return Math.log10(x);\n    }\n  }, {\n    key: \"ln\",\n    value: function ln(x) {\n      return Math.log(x);\n    }\n  }]);\n\n  return Maths;\n}();\n\nexport { Maths as default };","map":{"version":3,"sources":["/data/data/com.termux/files/home/projects/maths.tsx"],"names":["Maths","trigMode","x","Math","sin","PI","cos","tan","asin","acos","atan","log10","log"],"mappings":";;;IAAqBA,K;AACpB,iBAAYC,QAAZ,EAAsB;AAAA;;AACrB,SAAKA,QAAL,GAAgBA,QAAhB;AACA;;;;WACD,aAAIC,CAAJ,EAAwB;AACvB,UAAI,KAAKD,QAAL,IAAiB,KAArB,EAA4B;AAC3B,eAAOE,IAAI,CAACC,GAAL,CAAUF,CAAC,GAAGC,IAAI,CAACE,EAAV,GAAgB,GAAzB,CAAP;AACA,OAFD,MAEO,OAAOF,IAAI,CAACC,GAAL,CAASF,CAAT,CAAP;AACP;;;WACD,aAAIA,CAAJ,EAAwB;AACvB,UAAI,KAAKD,QAAL,IAAiB,KAArB,EAA4B;AAC3B,eAAOE,IAAI,CAACG,GAAL,CAAUJ,CAAC,GAAGC,IAAI,CAACE,EAAV,GAAgB,GAAzB,CAAP;AACA,OAFD,MAEO,OAAOF,IAAI,CAACG,GAAL,CAASJ,CAAT,CAAP;AACP;;;WACD,aAAIA,CAAJ,EAAwB;AACvB,UAAI,KAAKD,QAAL,IAAiB,KAArB,EAA4B;AAC3B,YAAIC,CAAC,IAAI,EAAT,EAAa,OAAO,WAAP;AACb,eAAOC,IAAI,CAACI,GAAL,CAAUL,CAAC,GAAGC,IAAI,CAACE,EAAV,GAAgB,GAAzB,CAAP;AACA,OAHD,MAGO,OAAOF,IAAI,CAACI,GAAL,CAASL,CAAT,CAAP;AACP;;;WACD,gBAAOA,CAAP,EAA2B;AAC1B,UAAI,KAAKD,QAAL,IAAiB,KAArB,EAA4B;AAC3B,eAAOE,IAAI,CAACK,IAAL,CAAUN,CAAV,IAAe,GAAf,IAAsB,IAAIC,IAAI,CAACE,EAA/B,CAAP;AACA,OAFD,MAEO,OAAOF,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAP;AACP;;;WACD,gBAAOA,CAAP,EAA2B;AAC1B,UAAI,KAAKD,QAAL,IAAiB,KAArB,EAA4B;AAC3B,eAAOE,IAAI,CAACM,IAAL,CAAUP,CAAV,IAAe,GAAf,IAAsB,IAAIC,IAAI,CAACE,EAA/B,CAAP;AACA,OAFD,MAEO,OAAOF,IAAI,CAACM,IAAL,CAAUP,CAAV,CAAP;AACP;;;WACD,gBAAOA,CAAP,EAA2B;AAC1B,UAAI,KAAKD,QAAL,IAAiB,KAArB,EAA4B;AAC3B,eAAOE,IAAI,CAACO,IAAL,CAAUR,CAAV,IAAe,GAAf,IAAsB,IAAIC,IAAI,CAACE,EAA/B,CAAP;AACA,OAFD,MAEO,OAAOF,IAAI,CAACO,IAAL,CAAUR,CAAV,CAAP;AACP;;;WACD,aAAIA,CAAJ,EAAwB;AACvB,aAAOC,IAAI,CAACQ,KAAL,CAAWT,CAAX,CAAP;AACA;;;WACD,YAAGA,CAAH,EAAuB;AACtB,aAAOC,IAAI,CAACS,GAAL,CAASV,CAAT,CAAP;AACA;;;;;;SAxCmBF,K","sourcesContent":["export default class Maths {\n\tconstructor(trigMode) {\n\t\tthis.trigMode = trigMode;\n\t}\n\tsin(x: number) : number {\n\t\tif (this.trigMode == 'Deg') {\n\t\t\treturn Math.sin((x * Math.PI) / 180);\n\t\t} else return Math.sin(x);\n\t}\n\tcos(x: number) : number {\n\t\tif (this.trigMode == 'Deg') {\n\t\t\treturn Math.cos((x * Math.PI) / 180);\n\t\t} else return Math.cos(x);\n\t}\n\ttan(x: number) : number {\n\t\tif (this.trigMode == 'Deg') {\n\t\t\tif (x == 90) return 'undefined';\n\t\t\treturn Math.tan((x * Math.PI) / 180);\n\t\t} else return Math.tan(x);\n\t}\n\tsinInv(x: number) : number {\n\t\tif (this.trigMode == 'Deg') {\n\t\t\treturn Math.asin(x) * 360 / (2 * Math.PI);\n\t\t} else return Math.asin(x);\n\t}\n\tcosInv(x: number) : number {\n\t\tif (this.trigMode == 'Deg') {\n\t\t\treturn Math.acos(x) * 360 / (2 * Math.PI);\n\t\t} else return Math.acos(x);\n\t}\n\ttanInv(x: number) : number {\n\t\tif (this.trigMode == 'Deg') {\n\t\t\treturn Math.atan(x) * 360 / (2 * Math.PI);\n\t\t} else return Math.atan(x);\n\t}\n\tlog(x: number) : number {\n\t\treturn Math.log10(x)\n\t}\n\tln(x: number) : number {\n\t\treturn Math.log(x)\n\t}\n}"]},"metadata":{},"sourceType":"module"}